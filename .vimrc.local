"UI changes {
    " for making base16 show colors properly
    " "let base16colorspace=256
    " for making screen show colors properly
    "if &term == "screen"
      "set t_Co=256
    "endif
    syntax enable
    if has('gui_running')
        colorscheme jellybeans
        set guifont=Consolas\ 15
    else
        "colorscheme sol
        "colorscheme jellybeans
        "colorscheme evening
        "colorscheme github
        "colorscheme PaperColor
        colorscheme hybrid_material
        " set background=light
        " colorscheme solarized
        let g:enable_bold_font = 1
    endif
    let g:enable_bold_font = 1
    "if &diff
        "colorscheme evening
    "endif
    " bold the current line
    if &diff
        " diff mode"
        set diffopt+=iwhite
        set diffexpr=""
    endif
    set cursorline
    hi CursorLine term=bold cterm=bold guibg=Grey40
    " disable highlighting of tabs
    let g:indent_guides_enable_ov_vim_startup=0
    set relativenumber
    set wrap
    set linebreak
    " Use the same symbols as TextMate for tabstops and EOLs
    " show tabs and newline characters
    " Highlight problematic whitespace
    set listchars=tab:▸\ ,trail:•,extends:#,nbsp:.,eol:¬,space:.
    set nospell " disable spell check
    hi clear SpellBad
    set nolist
    " doesn't highlighting braceses matching
    let g:loaded_matchparen=1
    " lighten the background color after 80 column width
    let &colorcolumn=join(range(81,999),",")
    highlight ColorColumn ctermbg=235 guibg=#2c2d27
" }

" Environment {

    set wildignorecase
    set ignorecase " Make search case insensitive
    set smartcase
    set pastetoggle=<F3>
    set clipboard=unnamedplus
    set shell=/usr/bin/zsh "make zsh as default shell for vim
" }

" MAPPINGS {
    " go to normal mode and keep the cursor at its original position
    inoremap jk <esc>l
    " open vim help for text under the cursor
    nnoremap K :help <C-r><C-w><CR>

    " Shortcut to rapidly toggle set list
    nnoremap <leader>l :set list!<CR>

    " open ~/.vimrc.local for in vertical split for editing
    nnoremap <silent> <leader>ev :vsplit ~/.vimrc.local<CR>
    nnoremap <silent> <leader>eb :vsplit ~/.vimrc.bundles.local<CR>
    nnoremap <silent> <leader>en :vsplit ~/Dropbox/notes/vim-notes.md<CR>
    nnoremap <silent> <leader>sv :source $MYVIMRC<CR>

    " inserting date with F5
    nnoremap <F5> "=strftime("%d-%b-%Y")<CR>P
    inoremap <F5> <C-R>=strftime("%d-%b-%Y")<CR>

    " <Ctrl-l> redraws the screen and removes any search highlighting.
    nnoremap <silent> <C-l> :nohl<CR><C-l>

    nnoremap <right> <Nop>
    nnoremap <left> <Nop>

    " move the current line down
    nnoremap <S-down> :m +1<CR>
    " move the current line up
    nnoremap <S-up> :m -2<CR>
    " move the current line up
    vnoremap <S-down> :m +1<CR>
    " move the current line up
    vnoremap <S-up> :m -2<CR>


    " for auto centering
        nnoremap G Gzz
        nnoremap n nzz
        nnoremap N Nzz
        nnoremap } }zz
        nnoremap { {zz
    " put newline above the current line
    "nnoremap gO O<ESC>
    " g<C-O> put newline below the current line
    "nnoremap g<C-O> o<ESC>

    " easier moving of code blocks
    " better indentation
    vnoremap > >gv

    " goto end of file and center the screen and go to insert mode
    nnoremap <C-g> Gzzo
    
    " go to start of line
    nnoremap H 0
    " go to end of line
    "nnoremap L g_
    " open filename under to cursor in a vertical split
    nnoremap gf :vertical wincmd f<CR>

    nnoremap gm m

    " EasyClip plugin {
        nmap M <Plug>MoveMotionEndOfLinePlug
        let g:EasyClipUseSubstituteDefaults=1
        let g:EasyClipShareYanks=1
        let g:EasyClipUsePasteToggleDefaults = 0
        nmap <c-f> <plug>EasyClipSwapPasteForward
        nmap <c-d> <plug>EasyClipSwapPasteBackwards
    " }

    " AIRLINE_THEME {
        let g:airline_theme='jellybeans'
    " }

    " BASH-SUPPORT {
        let g:BASH_MapLeader = '\'
    " }

    " Tabularize {
    " trigger the :Tabularize command whenever you type | symbol
        inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

        function! s:align()
          let p = '^\s*|\s.*\s|\s*$'
          if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
            let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
            let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
            Tabularize/|/l1
            normal! 0
            call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
          endif
        endfunction
    " }

    " VIM-INSTANT-MARKDOWN PLUGIN {

        " refesh the changes only when no keys have been pressed for a while or a
        " while after we leave insert mode or we save the file being edited
        let g:instant_markdown_slow = 0
        " vim-intant-markdown will not automatically launch the browser preview window
        " when we open a markdown file. To manually trigger preview the command is
        " :InstantMarkdownPreview
        let g:instant_markdown_autostart = 0

    " }

    " UNDOTREE PLUGIN {
        if has("persistent_undo")
            set undodir=~/.undodir/
        endif
    " }

    " CLANG-FORMAT PLUGIN {
        " When the value is 1, a current buffer is automatically formatted on
        " saving the buffer. Formatting is executed on BufWritePre event.
        let g:clang_format#auto_format_on_insert_leave=1

        " When the value is 1, a current buffer is automatically formatted on
        " saving the buffer. Formatting is executed on BufWritePre event.
         " let g:clang_format#auto_format_on_insert_leave=1
    " }

    " AUTO-SAVE PLUGIN {
        " enable auto_save at startup
        " let g:auto_save = 1
    " }
    " LINEDIFF PLUGIN {
        vmap <leader>ld :Linediff
        " nmap <leader>ld :Linediff
    " }
    " NERDCOMMENTER {
        " Add spaces after comment delimiters by default
        let g:NERDSpaceDelims = 1

        " Use compact syntax for prettified multi-line comments
        let g:NERDCompactSexyComs = 1

        " Align line-wise comment delimiters flush left instead of following code indentation
        let g:NERDDefaultAlign = 'left'

        " Set a language to use its alternate delimiters by default
        "let g:NERDAltDelims_java = 1

        " Add your own custom formats or override the defaults
        "let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

        " Allow commenting and inverting empty lines (useful when commenting a region)
        "let g:NERDCommentEmptyLines = 1

        " Enable trimming of trailing whitespace when uncommenting
        let g:NERDTrimTrailingWhitespace = 1
    " }

" }
